import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  TextField,
  IconButton,
  Avatar,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  CircularProgress,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Tooltip,
  Button
} from '@mui/material';
import SendIcon from '@mui/icons-material/Send';
import AttachFileIcon from '@mui/icons-material/AttachFile';
import PersonIcon from '@mui/icons-material/Person';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import apiService from '../api/apiService';

// Fallback mock projects if the API fails
const MOCK_PROJECTS = [
  { id: 1, name: 'Demo Project 1' },
  { id: 2, name: 'Demo Project 2' }
];

const HomePage = ({ mockMode }) => {
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState('');
  const [chatInput, setChatInput] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [loadingProjects, setLoadingProjects] = useState(false);
  const [error, setError] = useState(null);
  const [useMockProjects, setUseMockProjects] = useState(false);
  const fileInputRef = useRef();

  // Fetch projects from backend
  useEffect(() => {
    const fetchProjects = async () => {
      setLoadingProjects(true);
      setError(null);
      
      try {
        if (mockMode) {
          // Use mock data in mock mode
          setTimeout(() => {
            setProjects(MOCK_PROJECTS);
            setLoadingProjects(false);
          }, 800);
        } else {
          try {
            // Fetch real projects from backend
            const response = await apiService.getProjects();
            if (response.data && Array.isArray(response.data.projects)) {
              setProjects(response.data.projects.map(id => ({ id })));
            } else {
              console.warn('Projects API returned invalid data format, using mock data');
              setProjects(MOCK_PROJECTS);
              setUseMockProjects(true);
            }
          } catch (err) {
            console.error('Error fetching projects:', err);
            // Fallback to mock projects if the API fails
            setProjects(MOCK_PROJECTS);
            setUseMockProjects(true);
          }
          setLoadingProjects(false);
        }
      } catch (err) {
        console.error('Error in project loading:', err);
        setError('Failed to load projects. Please try again.');
        setLoadingProjects(false);
      }
    };

    fetchProjects();
  }, [mockMode]);

  const handleProjectSelect = (event) => {
    setSelectedProject(event.target.value);
    setChatHistory([]);
  };

  const handleSendMessage = async () => {
    if (!selectedProject || !chatInput.trim()) return;
    const userMessage = chatInput.trim();
    setChatInput('');
    setChatHistory((prev) => [...prev, { role: 'user', content: userMessage }]);
    setLoading(true);
    try {
      if (mockMode || useMockProjects) {
        setTimeout(() => {
          setChatHistory((prev) => [
            ...prev,
            { role: 'assistant', content: `This is a mock response to your question: "${userMessage}". In a real application, this would be generated by the RAG system.` }
          ]);
          setLoading(false);
        }, 1200);
      } else {
        const result = await apiService.getAnswer(selectedProject, userMessage);
        setChatHistory((prev) => [
          ...prev,
          { role: 'assistant', content: result.data.answer }
        ]);
        setLoading(false);
      }
    } catch (error) {
      setChatHistory((prev) => [
        ...prev,
        { role: 'assistant', content: 'Sorry, an error occurred while generating the answer.' }
      ]);
      setLoading(false);
    }
  };

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (!file || !selectedProject) return;
    setUploading(true);
    try {
      if (mockMode || useMockProjects) {
        setTimeout(() => {
          setUploading(false);
        }, 1000);
      } else {
        await apiService.uploadFile(selectedProject, file);
        setUploading(false);
      }
    } catch (e) {
      setError('Failed to upload file');
      setUploading(false);
    }
  };

  return (
    <Box sx={{ maxWidth: 700, mx: 'auto', pt: 4, height: '100%', display: 'flex', flexDirection: 'column' }}>
      {useMockProjects && (
        <Paper elevation={0} sx={{ p: 2, mb: 2, backgroundColor: '#fff3e0', border: '1px solid #ffe0b2' }}>
          <Typography color="warning.dark">
            Using demo projects because the projects API endpoint is not available. 
            {mockMode ? '' : ' Turn on Mock Mode for full demo functionality.'}
          </Typography>
        </Paper>
      )}
      
      <Paper elevation={3} sx={{ p: 2, mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
        <FormControl fullWidth>
          <InputLabel>Select Project</InputLabel>
          <Select
            value={selectedProject}
            label="Select Project"
            onChange={handleProjectSelect}
            sx={{ minWidth: 180 }}
            disabled={loadingProjects || projects.length === 0}
          >
            {loadingProjects ? (
              <MenuItem disabled>Loading projects...</MenuItem>
            ) : projects.length === 0 ? (
              <MenuItem disabled>No projects available</MenuItem>
            ) : (
              projects.map((project) => (
                <MenuItem key={project.id} value={project.id.toString()}>
                  Project {project.id}
                </MenuItem>
              ))
            )}
          </Select>
        </FormControl>
        <Tooltip title="Upload PDF">
          <span>
            <IconButton
              color="primary"
              component="label"
              disabled={!selectedProject || uploading}
              sx={{ ml: 1 }}
            >
              <AttachFileIcon />
              <input
                type="file"
                accept="application/pdf"
                hidden
                ref={fileInputRef}
                onChange={handleFileChange}
              />
            </IconButton>
          </span>
        </Tooltip>
        {uploading && <CircularProgress size={24} sx={{ ml: 1 }} />}
      </Paper>
      <Paper elevation={1} sx={{ flexGrow: 1, p: 2, mb: 2, display: 'flex', flexDirection: 'column', minHeight: 400, maxHeight: 500, overflowY: 'auto', background: '#f9f9f9' }}>
        {loadingProjects ? (
          <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
            <CircularProgress size={40} sx={{ mb: 2 }} />
            <Typography variant="body1" color="text.secondary">
              Loading projects...
            </Typography>
          </Box>
        ) : selectedProject ? (
          chatHistory.length === 0 ? (
            <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', opacity: 0.7 }}>
              <SmartToyIcon sx={{ fontSize: 48, mb: 2, color: 'text.secondary' }} />
              <Typography variant="body1" color="text.secondary">
                Ask a question about your documents
              </Typography>
            </Box>
          ) : (
            <List>
              {chatHistory.map((message, index) => (
                <ListItem key={index} alignItems="flex-start" sx={{ flexDirection: message.role === 'user' ? 'row-reverse' : 'row', mb: 1 }}>
                  <ListItemAvatar>
                    <Avatar sx={{ bgcolor: message.role === 'user' ? 'primary.main' : 'secondary.main', ml: message.role === 'user' ? 2 : 0, mr: message.role === 'user' ? 0 : 2 }}>
                      {message.role === 'user' ? <PersonIcon /> : <SmartToyIcon />}
                    </Avatar>
                  </ListItemAvatar>
                  <Paper sx={{ p: 2, maxWidth: '80%', backgroundColor: message.role === 'user' ? '#e3f2fd' : 'white' }}>
                    <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
                      {message.content}
                    </Typography>
                  </Paper>
                </ListItem>
              ))}
            </List>
          )
        ) : (
          <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', opacity: 0.7 }}>
            {projects.length === 0 ? (
              <>
                <UploadFileIcon sx={{ fontSize: 48, mb: 2, color: 'text.secondary' }} />
                <Typography variant="body1" color="text.secondary" align="center">
                  No projects found. Please create a project first.
                </Typography>
              </>
            ) : (
              <>
                <UploadFileIcon sx={{ fontSize: 48, mb: 2, color: 'text.secondary' }} />
                <Typography variant="body1" color="text.secondary">
                  Please select a project to start chatting and uploading files.
                </Typography>
              </>
            )}
          </Box>
        )}
      </Paper>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <TextField
          placeholder={selectedProject ? "Type your question..." : "Select a project first"}
          value={chatInput}
          onChange={(e) => setChatInput(e.target.value)}
          fullWidth
          variant="outlined"
          size="small"
          disabled={!selectedProject || loading}
          onKeyPress={(e) => {
            if (e.key === 'Enter' && !e.shiftKey && chatInput.trim()) {
              e.preventDefault();
              handleSendMessage();
            }
          }}
        />
        <IconButton
          color="primary"
          onClick={handleSendMessage}
          disabled={!selectedProject || !chatInput.trim() || loading}
        >
          {loading ? <CircularProgress size={24} /> : <SendIcon />}
        </IconButton>
      </Box>
      {error && (
        <Paper elevation={0} sx={{ p: 2, mt: 2, backgroundColor: '#ffebee', border: '1px solid #ffcdd2' }}>
          <Typography color="error">{error}</Typography>
          <Button size="small" sx={{ mt: 1 }} onClick={() => setError(null)}>
            Dismiss
          </Button>
        </Paper>
      )}
    </Box>
  );
};

export default HomePage; 