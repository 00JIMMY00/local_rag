version: '3.8'

services:
  backend:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: minirag-backend
    ports:
      - "5000:5000"
    volumes:
      - /home/jimmy/Grad/local_rag/src:/app
    environment:
      - APP_NAME=mini-RAG
      - APP_VERSION=0.1
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=minirag2222
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_MAIN_DATABASE=minirag
      - GENERATION_BACKEND=OPENAI
      - EMBEDDING_BACKEND=COHERE
      - GENERATION_MODEL_ID=gpt-4o-mini
      - EMBEDDING_MODEL_ID=embed-multilingual-light-v3.0
      - EMBEDDING_MODEL_SIZE=384
      - VECTOR_DB_BACKEND=PGVECTOR
      - PRIMARY_LANG=ar
      - DEFAULT_LANG=en
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - minirag-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: minirag-frontend
    ports:
      - "3001:3001"
    volumes:
      - /home/jimmy/Grad/local_rag/frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://173.212.254.228:5000
      - VITE_API_BASE_PATH=/api/v1
      - VITE_FRONTEND_URL=http://173.212.254.228:3001
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - minirag-network

  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: minirag-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=minirag2222
      - POSTGRES_DB=minirag
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - minirag-network

volumes:
  postgres-data:

networks:
  minirag-network:
    driver: bridge 